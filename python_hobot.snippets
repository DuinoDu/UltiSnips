####################################
#
# mxnet
#
####################################
snippet testsym
data = mx.sym.Variable(name='data')
data_shape = (1, 3, 256, 256)
data = mx.sym.Variable(name='data')
net_symbol = ${1:build_net}(data)
output_shape = net_symbol.infer_shape(data=data_shape)
print('network output shape:', output_shape[1])
endsnippet

snippet symconv 
${3:output} = mx.symbol.Convolution(name='${1:name}', data=${2:input}, num_filter=${4:64}, pad=(${5:1}, $5), 
                                    kernel=(${6:3}, $6), stride=(${7:1}, $7), no_bias=${8:True})
endsnippet

snippet symbn
${3:output} = mx.symbol.BatchNorm(name='${1:name}', data=${2:input}, use_global_stats=True, fix_gamma=False, 
                                  eps=${4:eps})
endsnippet

snippet symrelu
${3:output} = mx.symbol.Activation(name='${1:name}', data=${2:input}, act_type='relu')
endsnippet

snippet sympool
${3:output} = mx.symbol.Pooling(name='${1:name}', data=${2:input}, pooling_convention='full', 
                                pad=(${4:0}, $4), kernel=(${5:3}, $5), stride=(${6:2}, $6), pool_type='${7:max}')
endsnippet

snippet tosym
sym = ${1:net}(mx.sym.var('data'))
endsnippet

snippet mxviz
mx.viz.plot_network(symbol=${1:symbol}, shape={'data':${2:(1,3,224,224)}}, title='symbol', save_format='jpg').render()
endsnippet

snippet readrec
imgrec = mx.recordio.MXIndexedRecordIO(imgidx_path, imgrec_path, 'r')
_, img = mx.recordio.unpack_img(imgrec[roi_rec['imgrec_id']].read_idx(roi_rec['imgrec_idx']), cv2.IMREAD_COLOR)
endsnippet

snippet profile
from mxnet import profiler
profiler.set_config(profile_all=True, aggregate_stats=False, filename='profile_output.json')
profiler.set_state('run')

#TODO

profiler.set_state('stop')

endsnippet

snippet lp
import line_profiler
profiler = line_profiler.LineProfiler(${1:function})
profiler.enable()

# TODO, $1

profiler.disable()
fid = open('lp_output.txt.py', 'w')
profiler.print_stats(fid)
fid.close()

endsnippet


####################################
#
# gluon
#
####################################
snippet incgluon
import mxnet as mx
import mxnet.ndarray as nd
import mxnet.gluon as gluon
import mxnet.gluon.nn as nn
import mxnet.autograd as autograd
endsnippet

snippet hs "gluon.nn.HybridSequential"
${1:out} = nn.HybridSequential(${2:**kwargs})
with $1.name_scope():
	$1.add($3)
endsnippet

snippet hs2 "gluon.nn.HybridSequential in class"
with self.name_scope():
	${1:out} = nn.HybridSequential()
	$1.add($2)
endsnippet

snippet hb "gluon.nn.HybridBlock"
class ${1:BlockName}(nn.HybridBlock):
	def __init__(self, ${2}, **kwargs):
		super($1, self).__init__(**kwargs)

	def hybrid_forward(self, F, x):
		${3:#TODO}
		return x
endsnippet

snippet testblock
x = nd.random_normal(shape=(${1:1, 3, 224, 224}))
net = ${2:Net}()
net.collect_params().initialize()
y = net(x)
print(y.shape)
endsnippet

snippet conv
nn.Conv2D(channels=${1:channels}, kernel_size=${2:kernel_size}, strides=${3:1}, padding=${4:0}, use_bias=${5:False})
endsnippet

snippet bn
nn.BatchNorm(scale=True)
endsnippet

snippet relu
nn.Activation('${1:relu}')
endsnippet

snippet act
activation='${1:relu}'
endsnippet

snippet pool
nn.MaxPool2D(pool_size=${1:2}, strides=${2:2})
endsnippet

snippet flatten
nn.Flatten()
endsnippet

snippet fc
nn.Dense(${1:out_channels})
endsnippet



####################################
#
# gluon_horizon
#
####################################
snippet checkmodel
from gluon_horizon.hbcc.utils import get_symbol
from gluon_horizon.hbcc.model_checker import model_checker
with QuantizationBlockScope(mode=QuantizationModeEnum.kIntInference, mirroring_level=0):
	net = ${1:Net()} 
symbol = get_symbol(net, num_inputs=1)
flag = model_checker(symbol, march='x2', shape=(1, ${2:28}, ${3:28}, 3), strip_quanti_op_postfix=True, remove_tmp_files=True)
if flag == 0:
	print('[+]Success to pass model checker![+]')
else:
	print('[-]Failed to pass model checker![-]')

endsnippet


####################################
#
# hobotpy
#
####################################
snippet ltpl 
# -*- coding: utf-8 -*-
"""${2:description}"""

from __future__ import division
import numpy as np


__all__ = ['$1Encoder', '$1Decoder']


class ${1:Name}Encoder(object):
    """Label to target transform.

	Input
	-----

	Output
	------

	Example
	-------
	>>> encoder = $1Encoder()
	>>> target, weight = encoder(label)

    """
    def __init__(self):
		pass

    def __call__(self):
		pass


class $1Decoder(object):
    """Target to predict transform.

	Input
	-----

	Output
	------

	Example
	-------
	>>> decoder = $1Decoder()
	>>> pred_label = decoder(pred_target)

    """
    def __init__(self):
        pass

    def __call__(self):
        pass
endsnippet


snippet loss
"""det loss."""
# coding: utf-8
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

from mxnet.gluon.loss import Loss, _reshape_like, _apply_weighting


class ${1:Name}Loss(Loss):
    r"""Calculates $1 loss.

    refer to paper <paper>

    """
    def __init__(self, 
				 weight=None, batch_axis=0,
                 size_average=True, **kwargs):
        super($1Loss, self).__init__(weight, batch_axis, **kwargs)
        self._size_average = size_average
        self._eps = 1e-6

    def hybrid_forward(self, F, pred, label, sample_weight=None):
        """Loss forward"""
		pass

        loss = _apply_weighting(F, loss, self._weight, sample_weight)
        if self._size_average:
            return F.mean(loss, axis=self._batch_axis, exclude=True)
        else:
            return F.sum(loss, axis=self._batch_axis, exclude=True)

endsnippet


snippet export
self.test_net.export("${1:model}", epoch=0)
print("dump to $1")
import sys; sys.exit()
endsnippet


#####################
#
# roidb, ...
#
#####################
snippet pickle
try:
    import cPickle as pickle
except ImportError as e:
    import pickle
endsnippet


########
#
# person
#
########
snippet engine
from easydict import EasyDict as edict
from predperson import Engine
cfg = edict()

# --- 
# cfg.engine = 'mxnet-gluon'
# cfg.json = 'model-symbol.json'
# cfg.params = 'model-0000.params'
# --- 
# cfg.engine = 'caffe'
# cfg.prototxt = 'model.prototxt'
# cfg.caffemodel = 'model.caffemodel'
# --- 
# cfg.engine = 'onnx-public'
# cfg.onnxfile = 'model.onnx'

cfg.gpus = '0'
engine = Engine(cfg)
output = engine(x)
endsnippet

snippet hobot
# Copyright (c) Horizon Robotics. All rights reserved.

from typing import List, Set, Dict, Tuple, Optional
endsnippet
