# Django

snippet graphene
INSTALLED_APPS = (
    # After the default packages
    'graphene_django',
)

GRAPHENE = {
    'SCHEMA': '${1:project_name}.schema.schema',
}
endsnippet

## Model
snippet model
class ${1:Name}(models.Model):
	${2:# add var}
endsnippet

snippet url
${1:url} = models.URLField()
endsnippet

snippet text
${1:text_string} = models.TextField(blank=True)
endsnippet

snippet manytoone
${1:name} = models.ForeignKey(${2:one_key_name}, on_delete=models.CASCADE)
endsnippet

snippet user
#from django.conf import settings
settings.AUTH_USER_MODEL
endsnippet

## Schema
snippet importgraphql
import graphene
from graphene_django import DjangoObjectType
endsnippet

snippet type
from .models import ${1:Name}


class $1Type(DjangoObjectType):
    class Meta:
        model = $1


class Query(graphene.ObjectType):
    ${2:name}s = graphene.List($1Type)
    def resolve_$2s(self, info, **kwargs):
        return $1.objects.all()


class Create$1(graphene.Mutation):
    ${3:field} = graphene.String()

    class Arguments:
        $3 = graphene.String(required=True)

    def mutate(self, info, $3):
		# create $2 and save
        $2 = $1(
			$3=$3,
        )
        $2.save()

        return Create$1(
			$3=$3,
		)

class Mutation(graphene.ObjectType):
    create_$2 = Create$1.Field()
endsnippet

snippet addtype
class ${1:Name}Type(DjangoObjectType):
    class Meta:
        model = $1
endsnippet

snippet type_user
from django.contrib.auth import get_user_model
class UserType(DjangoObjectType):
    class Meta:
        model = get_user_model()
endsnippet

snippet rootschema
import graphene

import ${1:app}.schema

class Query(
        $1.schema.Query, 
        graphene.ObjectType):
    pass

class Mutation(
        $1.schema.Mutation, 
        graphene.ObjectType):
	pass

schema = graphene.Schema(query=Query, mutation=Mutation)
endsnippet
