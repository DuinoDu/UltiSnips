# readfile
snippet readfile
//#include <fstream>
//#include <string>
//using namespace std;
ifstream file;
string line;
file.open("${1:filepath}");
if (file.is_open()){
	while (!file.eof()){ 
		file >> line;
		cout << line << endl;
		${2:TODO}
	}
}
endsnippet


## Preprocessor
snippet incv
#include <opencv2/${1:opencv}.hpp>

using namespace cv;
endsnippet

## show fps
snippet fps
void showFPS(Mat& img)
{
    static clock_t t0 = clock();
    float time_cost = (float)(clock() - t0)/CLOCKS_PER_SEC; // sec
    t0 = clock();

    float fps = 1/time_cost;
    putText(img, "fps:" + to_string(fps), Point(10,50), 1, 1, Scalar(0,0,255));
}
endsnippet


## Image process snippet 
snippet ip 
/* 
 *
 */
void ${1:name}( InputArray _${2:input}, InputOutputArray _${3:inout}, double ${4:param})
{
    CV_Assert( _$2.type() == CV_8UC1 && _$3.type() == CV_32FC1 );
    CV_Assert( _$2.sameSize(_$3));

    Mat $2 = _$2.getMat(), $3= _$3.getMat();
    Size size = $2.size();

    if( $2.isContinuous() && $3.isContinuous() )
    {
        size.width *= size.height;
        size.height = 1;
    }

    for( int y = 0; y < size.height; y++ )
    {
        const uchar* $2Data = $2.ptr<uchar>(y);
        float* $3Data = $3.ptr<float>(y);

        for( int x = 0; x < size.width; x++ )
        {
            // TODO
			${5}
        }
    }
}
endsnippet


## Open Camera
snippet camera 
int camera_id = 0;
VideoCapture capture(camera_id);
if(!capture.isOpened()){
  cout << "Can not open camera" << endl;
  return -1;
}
double rate= capture.get(CV_CAP_PROP_FPS);
Mat frame; 
namedWindow("Camera");

int delay= 1000/rate;
while (true) {
  if (!capture.read(frame))
    break;

  // TODO
  ${1}

  imshow("Camera",frame);
  char key = cv::waitKey(delay);
  if (key == 'q')
    break;
}
capture.release();
destroyAllWindows();
endsnippet



# Mouse
snippet mouse
void MouseCallback(int mouseEvent,int x,int y,int flags,void* params) 
{ 
	${2:int}* ${3:p} = ($2*)params;
	switch(mouseEvent) 
	{ 
	case CV_EVENT_LBUTTONDOWN: 
		${3}
		break; 
	case CV_EVENT_MOUSEMOVE: 
		break; 
	case CV_EVENT_LBUTTONUP: 
		break; 
	default:
		break;
	}
	return; 
} 
// setMouseCallback("window", MouseCallback, &params);
endsnippet


snippet imread
auto img = cv::imread(${1:imgfile});
endsnippet

snippet torgb
cv::cvtColor(${1:img}, $1, cv::CV_BGR2RGB);
endsnippet

snippet esc
cv::namedWindow("Display Image", cv::WINDOW_AUTOSIZE);
cv::imshow("Display Image", ${1:img});
cv::waitKey(0);
endsnippet

snippet imwrite
cv::imwrite(${2:filename}, ${1:img});
endsnippet

snippet cv2circle
cv::circle(InputOutputArray img, Point center, int radius, const Scalar &color, int thickness=1);
endsnippet

snippet getimg
#include <filesystem>

static bool endswith(const std::string& str, const std::string& suffix) {
  return str.size() >= suffix.size() && 0 == str.compare(str.size()-suffix.size(), suffix.size(), suffix);
}

static bool startswith(const std::string& str, const std::string& prefix) {
  return str.size() >= prefix.size() && 0 == str.compare(0, prefix.size(), prefix);
}

for (const auto & file : std::filesystem::directory_iterator(${1:root})) {
  if (endswith(file.path().string(), ".png")) {
    ${2:TODO}
  }
}
endsnippet

snippet printmap
for(auto &pair : ${1:my_map}) {
  std::cout << pair.first << ": " << pair.second << std::endl;
}
endsnippet

snippet printvec
for(auto &item :${1:my_vec}) {
  std::cout << item << std::endl;
}
endsnippet

snippet print
std::cout << ${1} << std::endl;
endsnippet

snippet cvmat
cv::Mat ${1:mat}(${2:height}, ${3:width}, ${4:CV_8UC3}, ${5:image_addr});
endsnippet

snippet timestring
auto t = std::time(nullptr);
auto tm = *std::localtime(&t);
std::ostringstream oss;
oss << std::put_time(&tm, "%d-%m-%Y_%H-%M-%S");
std::string timestring = oss.str();
endsnippet

snippet timecost
#include <chrono>

std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
${1}
std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
std::cout << "cost " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[Âµs]" << std::endl;
endsnippet
