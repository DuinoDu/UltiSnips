####################################
#
# os, file, folder, read, write
#
####################################

snippet isdir
if not os.path.exists(${1:dirname}):
    os.makedirs($1)
endsnippet

snippet join
os.path.join($1)
endsnippet

snippet dump
with open('${2:file}', 'w') as fid:
	pickle.dump(${1:var}, fid)
endsnippet

snippet load
with open('${1:file}', 'r') as fid:
	${2:var} = pickle.load(fid)
endsnippet

snippet getimg
${1:imgfiles} = sorted([os.path.join(${2:root}, x) for x in sorted(os.listdir($2)) if x.endswith('.jpg')])
endsnippet

snippet readxml
#import xml.etree.ElementTree as ET
tree = ET.parse(xmlfile)
width = int(tree.find('size').find('width').text)
height = int(tree.find('size').find('height').text)
objs = tree.findall('object')
for index, obj in enumerate(objs):
    name = obj.find('name').text.lower()
    bbox = obj.find('bndbox')
    x1 = int(bbox.find('xmin').text) - 1
    y1 = int(bbox.find('ymin').text) - 1
    x2 = int(bbox.find('xmax').text) - 1
    elif args.cuda:
        net = net.cuda()
    y2 = int(bbox.find('ymax').text) - 1
endsnippet

snippet sh
try:
    import commands
except Exception as e:
    import subprocess as commands

cmd = '$1'
(status, output) = commands.getstatusoutput(cmd)
output = output.split('\n')
endsnippet

snippet addpath
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), "${1:..}"))
endsnippet

snippet sort
${1:x} = sorted($1, key=lambda ${2:input} : $2[${3:"keyname"|0}])
endsnippet

snippet re
import re
m = re.search('${1:reg pattern}', ${2:str})
if m is not None:
	output = m.group(0)
else:
	pass
endsnippet

snippet pyversion
import sys
if sys.version_info[0] == ${1:2}
	pass
else:
	pass
endsnippet


####################################
#
# display, show 
#
####################################

snippet print
print($1)
endsnippet

snippet printi
    sys.stdout.flush()
    sys.stdout.write('writing {}/{}\r'.format(i, len(files)))
    i += 1 # set i = 0 before looping
print '\nFinish!'
endsnippet

snippet printcolor "print colorful string" b
from termcolor import cprint  
cprint(i, 'green', 'on_red', end=' ') 
endsnippet

snippet printtable "print table on terminal" b
from prettytable import PrettyTable
table = PrettyTable(['${1:name1}', '${2:name2}'])
table.add_row([${3:name1_value}, ${4:name2_value}])
table.sort_key($2)
table.reversesort = True
print(table)
endsnippet

snippet progress
import tqdm
t = tqdm.tqdm()
t.total = ${1:length}
for i in range($1):
    t.update()
endsnippet


####################################
#
# PIL 
#
####################################

snippet topil
#from PIL import Image
#import cv2
${1:im} = Image.fromarray(cv2.cvtColor($1,cv2.COLOR_BGR2RGB))
endsnippet

snippet tocv2
#from PIL import Image
#import numpy as np
${1:im} = np.array($1)[:,:,::-1].copy()
endsnippet


####################################
#
# cv2 
#
####################################

snippet camera
cap = cv2.VideoCapture(0)
while True:
    ok, f = cap.read()
    if ok:    
        cv2.imshow("image", f)
    if cv2.waitKey(20) == 27:
        break
cv2.destroyAllWindows()
endsnippet

snippet esc
cv2.imshow('img', ${1:img})
ch = cv2.waitKey(0) & 0xff
if ch == 27: #ord('q')
	break
endsnippet

snippet cv2rect
${1:img} = cv2.rectangle($1, (${2:x1}, ${3:y1}), (${4:x2}, ${5:y2}), (0, 255, 0), 2)
endsnippet
snippet cv2rect
${1:img} = cv2.rectangle($1, (${2:pt}[0], $2[1]), ($2[2], $2[3]), (0, 255, 0), 2)
endsnippet
snippet cv2circle
${1:img} = cv2.circle($1, (${2:x0}, ${3:y0}), ${4:r}, (0, 255, 0), 2)
endsnippet
snippet cv2resize
${1:img} = cv2.resize($1, (int($1.shape[1]/${2}), int($1.shape[0]/$2)))
endsnippet
snippet cv2text
${1:img} = cv2.putText($1, ${2:str},(${3:x}, ${4:y}),cv2.FONT_HERSHEY_COMPLEX, 1, (0,0,255), 2)
endsnippet
snippet cv2line
${1:img} = cv2.line($1, (${2:x1}, ${3:y1}), (${4:x2}, ${5:y2}), (0, 255, 0), 2)
endsnippet

snippet contour
im = cv2.imread(${1:imgpath})
im_gray = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
_, im_thresh = cv2.threshold(im_gray, 177, 255, cv2.THRESH_BINARY)
_, contours, hierarchy = cv2.findContours(im_thresh, cv2.RETR_TREE ,cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(im, contours,-1,(0,255,0),1)
endsnippet

snippet cv2fps
#import time
start  = time.time()
# process one frame
end = time.time()
fps = 1./(end - start)
print("FPS: ", fps)
endsnippet

snippet tracker
tracker = cv2.TrackerKCF_create()

roi = cv2.selectROI("image", frame, True, False)
tracker.init(frame, roi) # roi:[x1, y1, w, h]

while True:
	isfound, roi = tracker.update(frame)
endsnippet

snippet mp 
import multiprocessing as mp
def ${1:subprocess}_loop(in_q, out_q):
    while True:
        im = in_q.get()
        # process
        ret = im.shape
        out_q.put(ret)

# init process
in_q = mp.Queue()
out_q = mp.Queue()
$1_process = mp.Process(target=$1_loop, args=(in_q, out_q))
$1_process.start()

# pass data in your program
# send
in_q.put(data)
# get
ret = []
try:
    ret = out_q.get(False)
except Exception as e:
    pass
endsnippet


####################################
#
# framework
#
####################################
snippet tool
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import argparse
import os

def $2(args):
	${3:pass}

def main(args):
    $2(args)

if __name__ == "__main__":
	parser = argparse.ArgumentParser(description='${1:description of this script}')
	# addarg here
	
	args = parser.parse_args()
	main(args)
endsnippet

snippet ask
import six
if six.PY3:
    str_compat = str
else:
    str_compat = unicode
def ask(question, answer=str_compat, default=None, l=None):
    def _input_compat(prompt):
        if six.PY3:
            return input(prompt) 
        else:
            return raw_input(prompt)

    if answer == str_compat:
        r = ''
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question, default))

            r = r.strip()

            if len(r) <= 0:
                if default:
                    r = default
                    break
                else:
                    print('You must enter something')
            else:
                if l and len(r) != l:
                    print('You must enter a {0} letters long string'.format(l))
                else:
                    break
        return r
    elif answer == bool:
        r = None
        while True:
            if default is True:
                r = _input_compat('> {0} (Y/n) '.format(question))
            elif default is False:
                r = _input_compat('> {0} (y/N) '.format(question))
            else:
                r = _input_compat('> {0} (y/n) '.format(question))

            r = r.strip().lower()

            if r in ('y', 'yes'):
                r = True
                break
            elif r in ('n', 'no'):
                r = False
                break
            elif not r:
                r = default
                break
            else:
                print("You must answer 'yes' or 'no'")
        return r
    elif answer == int:
        r = None
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question))

            r = r.strip()

            if not r:
                r = default
                break

            try:
                r = int(r)
                break
            except:
                print('You must enter an integer')
        return r
    else:
        raise NotImplemented(
            'Argument  must be str_compat, bool, or integer')

# Usage:
# value = ask('question?', str_compat, 'default')
# value = ask('question?', int, 0)
# value = ask('question?', bool, default)
endsnippet

####################################
#
# tool 
#
####################################

snippet tic
import time
t1 = time.time()
${1:add your function}
t2 = time.time()    
print("%.2f ms" % ((t2-t1)*1000))
endsnippet

snippet pp
ncpus = 12
ppservers = ()
job_server = pp.Server(ncpus, ppservers=ppservers)

inputs = []
def ${1:foo_work}(${2:arg}):
	# add yor for-loop here 

start_time = time.time()
print("Starting pp with", job_server.get_ncpus(), "workers")
jobs = [(input, job_server.submit($1, (input,)) for input in inputs]
for job in jobs():
	job()
print "Time elapsed: ", time.time() - start_time, "s"

job_server.print_stats()
endsnippet

snippet unittest
import unittest

class ${1:MySymbol}(unittest.TestCase):

	def test_${2:fname}(self):
		pass

if __name__ == '__main__':
    unittest.main()
endsnippet

snippet skip
@unittest.skip("tested")
endsnippet

snippet testeq
self.assertEqual(${1:v1}, ${2:v2})
endsnippet

snippet testtrue
self.assertTrue(${1:bool})
endsnippet

snippet timer
#import utils
timer = utils.Timer()
timer.start()
for i in range(1):
    # fun1
    timer.tictoc('${1:name}')
    # fun2
    timer.tictoc('${2:name}')
timer.end()
timer.log(show=True)
endsnippet
