####################################
#
# os, file, folder, read, write
#
####################################

snippet join
os.path.join($1)
endsnippet

snippet dirname
os.path.dirname($1)
endsnippet

snippet abspath
os.path.abspath($1)
endsnippet

snippet basename
os.path.basename($1)
endsnippet

snippet isdir
if not os.path.exists(${1:dirname}):
    os.makedirs($1)
endsnippet

snippet shuffle
import random
random.shuffle(${1:list})
endsnippet

snippet cp
import shutil
shutil.copy(${1:src}, ${2:dst()})
endsnippet

snippet cpr
import shutil
shutil.copytree(${1:src_dir}, ${2:dst_dir}, False)
endsnippet

snippet curdir
import os
os.path.basename(os.path.abspath(__file__))
endsnippet

snippet fordir
${1:items} = []
for path, dirs, files in os.walk(${2:root}, followlinks=True):
	$1 += [os.path.join(path, x) for x in files if x.endswith('.${3:json}')]
endsnippet

snippet readfile
$1 = [x.strip() for x in open(${2:filename}, 'r').readlines()]
endsnippet


snippet dump
with open(${2:file}, 'w') as fid:
	pickle.dump(${1:var}, fid)
endsnippet

snippet load
with open(${1:file}, 'r') as fid:
	${2:var} = pickle.load(fid)
endsnippet

snippet py3pickle
import sys
if sys.version_info[0] == 2:
	import cPickle as pickle
else:
	import pickle

#try:
#    roidb = pickle.load(open(args.roidb, 'rb'))
#except Exception as e:
#    roidb = pickle.load(open(args.roidb, 'rb'), encoding='iso-8859-1')

#pickle.dump(open(args.output, 'wb'))

endsnippet

snippet slice
def chunks(l, n):
	for i in range(0, len(l), n):
		yield l[i:i + n]
${2:small_list} = chunks(${1:big_list}, ${3:num})
endsnippet

snippet osversion
from sys import platform
if platform == "linux" or platform == "linux2":
	# linux
elif platform == "darwin":
	# OS X
elif platform == "win32":
	# Windows...
endsnippet

snippet getimg
${1:imgfiles} = sorted([os.path.join(${2:root}, x) for x in sorted(os.listdir($2)) if x.endswith('.jpg')])
endsnippet

snippet sh
try:
    import commands
except Exception as e:
    import subprocess as commands

cmd = '$1'
(status, output) = commands.getstatusoutput(cmd)
output = output.split('\n')
endsnippet

snippet addpath
import os, sys
sys.path.append(os.path.join(os.path.dirname(__file__), "${1:..}"))
endsnippet

snippet sort
${1:x} = sorted($1, key=lambda ${2:input} : $2[${3:"keyname"|0}])
endsnippet

snippet re
import re
m = re.search('${1:reg pattern}', ${2:str})
if m is not None:
	output = m.group(0)
else:
	pass
endsnippet

snippet pyversion
import sys
if sys.version_info[0] == 2:
	pass
else:
	pass
endsnippet

snippet forind
for ind, ${2:item} in enumerate(${1:obj}):
	if ind % 1000 == 0:
		print('%d / %d' % (ind, len($1)))
	$3
endsnippet

snippet loadroidb
print('loading %s' % ${1:args.roidb})
with open($1, 'rb') as fid:
	roidb = pickle.load(fid)

endsnippet

snippet saveroidb
print('saved in %s' % ${1:args.output})
with open($1, 'wb') as fid:
	pickle.dump(${2:new_roidb}, fid)

endsnippet

snippet all
__all__ = ['$1']
endsnippet

snippet exit
import sys; sys.exit()
endsnippet

####################################
#
# display, show 
#
####################################

snippet print
print($1)
endsnippet

snippet printi
    sys.stdout.flush()
    sys.stdout.write('writing {}/{}\r'.format(i, len(files)))
    i += 1 # set i = 0 before looping
print '\nFinish!'
endsnippet

snippet printcolor "print colorful string" b
from termcolor import cprint  
cprint(i, 'green', 'on_red', end=' ') 
endsnippet

snippet printtable "print table on terminal" b
from prettytable import PrettyTable
table = PrettyTable(['${1:name1}', '${2:name2}'])
table.add_row([${3:name1_value}, ${4:name2_value}])
table.sort_key($2)
table.reversesort = True
print(table)
endsnippet

snippet progress
import tqdm
t = tqdm.tqdm()
t.total = ${1:length}
for i in range($1):
    t.update()
endsnippet


####################################
#
# framework
#
####################################
snippet tool
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
${1:description of this script}
"""

from __future__ import print_function
import argparse
import os


def main(args):
	if args.output is None:
		args.output = '${3:output}'


if __name__ == "__main__":
	parser = argparse.ArgumentParser(description=__doc__)
	parser.add_argument('--${2:input}', default=None, type=str, help='$2', required=True)
	parser.add_argument('--output', default=None, type=str, help='output')
	args = parser.parse_args()
	main(args)
endsnippet

snippet tool2
#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import sys

if len(sys.argv) < 2:
    print("Usage: jsonloader [json] [ipy, option]")
	    sys.exit(0)

endsnippet



snippet ask
import six
if six.PY3:
    str_compat = str
else:
    str_compat = unicode
def ask(question, answer=str_compat, default=None, l=None):
    def _input_compat(prompt):
        if six.PY3:
            return input(prompt) 
        else:
            return raw_input(prompt)

    if answer == str_compat:
        r = ''
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question, default))

            r = r.strip()

            if len(r) <= 0:
                if default:
                    r = default
                    break
                else:
                    print('You must enter something')
            else:
                if l and len(r) != l:
                    print('You must enter a {0} letters long string'.format(l))
                else:
                    break
        return r
    elif answer == bool:
        r = None
        while True:
            if default is True:
                r = _input_compat('> {0} (Y/n) '.format(question))
            elif default is False:
                r = _input_compat('> {0} (y/N) '.format(question))
            else:
                r = _input_compat('> {0} (y/n) '.format(question))

            r = r.strip().lower()

            if r in ('y', 'yes'):
                r = True
                break
            elif r in ('n', 'no'):
                r = False
                break
            elif not r:
                r = default
                break
            else:
                print("You must answer 'yes' or 'no'")
        return r
    elif answer == int:
        r = None
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question))

            r = r.strip()

            if not r:
                r = default
                break

            try:
                r = int(r)
                break
            except:
                print('You must enter an integer')
        return r
    else:
        raise NotImplemented(
            'Argument  must be str_compat, bool, or integer')

# Usage:
# value = ask('question?', str_compat, 'default')
# value = ask('question?', int, 0)
# value = ask('question?', bool, default)
endsnippet

snippet roidbtool
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
${1:doc}
"""

from __future__ import print_function
import argparse
import os
import cPickle as pickle


def main(args):
    if args.output is None:
        args.output = 'output'

    print('loading %s' % args.roidb)
    with open(args.roidb, 'r') as fid:
        roidb = pickle.load(fid)

    for ind, roi in enumerate(roidb):
        if ind % 1000 == 0:
            print('%d / %d' % (ind, len(roidb)))
		${2:TODO}


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--roidb', default=None, type=str, help='', required=True)
    parser.add_argument('--imgdir', default=None, type=str, help='', required=True)
    parser.add_argument('--output', default=None, type=str, help='output')
    args = parser.parse_args()
    main(args)
endsnippet


####################################
#
# tool 
#
####################################

snippet tic
import time
t1 = time.time()
# func
print("${2:msg}: %.2f ms" % ((time.time()-t1)*1000))
endsnippet

snippet pp
ncpus = 12
ppservers = ()
job_server = pp.Server(ncpus, ppservers=ppservers)

inputs = []
def ${1:foo_work}(${2:arg}):
	# add yor for-loop here 

start_time = time.time()
print("Starting pp with", job_server.get_ncpus(), "workers")
jobs = [(input, job_server.submit($1, (input,)) for input in inputs]
for job in jobs():
	job()
print "Time elapsed: ", time.time() - start_time, "s"

job_server.print_stats()
endsnippet

snippet unittest
import unittest

class ${1:MySymbol}(unittest.TestCase):

	def test_${2:fname}(self):
		pass

if __name__ == '__main__':
    unittest.main()
endsnippet

snippet skip
@unittest.skip("tested")
endsnippet

snippet testeq
self.assertEqual(${1:v1}, ${2:v2})
endsnippet

snippet testtrue
self.assertTrue(${1:bool})
endsnippet

snippet timer
import time
tick_ms = int(round(time.time() * 1000))
endsnippet

snippet sdoc "doc for sphinx"
"""${1:What does it do?}

Parameters
----------
${2:param} : ${3:type}
	${4: comment}
Returns
-------
${5:type}
    ${6:comment}
"""
endsnippet

snippet docarg "add comment for one arg"
${1:param} : ${2:type}
	${3:comment}
endsnippet

snippet docex "add example in comment"
Examples
--------
>>> ${1:input}
endsnippet

snippet futs
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

endsnippet

snippet decorator
def ${1:name}(decorated_=None, ${3:args1}):
	"""${2:docstring}
	"""
	def _decorator(func):
		@functools.warps(func)
		def __decorator(*args, **kwargs):
			# defore, TODO

			res = func(*args, **kwargs)

			# after, TODO

			return res
		return __decorator
	if decorated_:
		return _decorator(decorated_)
	else:
		return _decorator
endsnippet
